package cn.smbms.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.smbms.entity.Role;
import cn.smbms.entity.User;
import cn.smbms.service.RoleService;

@Controller
@RequestMapping("/role")
public class RoleController {
	@Resource
	private RoleService roleService;
	@RequestMapping(value = "/roleList", method = RequestMethod.GET)
	public String roleList(Model model) {
		List<Role> roleList = roleService.queryAll(); //查询所有的角色列表
		model.addAttribute("roleList", roleList);
		//返回逻辑视图名，完成页面跳转
		return "rolelist";
	}
	@RequestMapping("/toRoleAdd")
	public String toRoleAdd() {
		return "roleadd";
	}
	@RequestMapping(value="/addRole",method=RequestMethod.POST)
	public String addRole(Role role,HttpServletRequest request) {
		User loginUser = (User) request.getSession().getAttribute("userSession");
		role.setCreatedBy(loginUser.getId());
		role.setCreationDate(new Date());
		int num =roleService.addRole(role);
		if (num >0) {
			return "redirect:/role/roleList";
		}else {
			return "redirect:/role/toRoleAdd";
		}
	}
	@RequestMapping("/roleModify")
	public String roleModify(@RequestParam("id")Integer id,Model model) {
		Role role =roleService.getRoleById(id);
		model.addAttribute("role", role);
		return "rolemodify";
	}
	@RequestMapping(value="/updateRole",method=RequestMethod.POST)
	public String updateRole(Role role,HttpServletRequest request) {
		User loginUser = (User) request.getSession().getAttribute("userSession");
		role.setModifyBy(loginUser.getId());
		role.setModifyDate(new Date());
		int num =roleService.updateRole(role);
		if (num >0) {
			return "redirect:/role/roleList";
		}else {
			return "redirect:/role/roleModify?id="+role.getId();
		}
	}
	@RequestMapping(value="/delRole/{id}",method = RequestMethod.GET)
	@ResponseBody  //只要加了这个注解，当前方法返回的数据才会被输出到响应流中
	public Object delBill(@PathVariable Integer id) {
		Role role = roleService.getRoleById(id);
		Map<String, String> resultMap = new HashMap<String, String>();
		if (role == null) {
			resultMap.put("delResult","notexist");  //订单不存在
		} else {
			int result =roleService.deleteRole(id);
			if (result > 0) {
				resultMap.put("delResult","true"); //删除成功
			} else {
				resultMap.put("delResult","false"); //删除失败
			}
		}
		return resultMap;
	}

}
